// Code generated by counterfeiter. DO NOT EDIT.
package bundlefakes

import (
	"sync"

	"github.com/carabiner-dev/signer/bundle"
	"github.com/carabiner-dev/signer/options"
	bundlea "github.com/sigstore/sigstore-go/pkg/bundle"
	"github.com/sigstore/sigstore-go/pkg/verify"
)

type FakeVerifier struct {
	BuildSigstoreVerifierStub        func(*options.Verifier) (bundle.VerifyCapable, error)
	buildSigstoreVerifierMutex       sync.RWMutex
	buildSigstoreVerifierArgsForCall []struct {
		arg1 *options.Verifier
	}
	buildSigstoreVerifierReturns struct {
		result1 bundle.VerifyCapable
		result2 error
	}
	buildSigstoreVerifierReturnsOnCall map[int]struct {
		result1 bundle.VerifyCapable
		result2 error
	}
	OpenBundleStub        func(string) (*bundlea.Bundle, error)
	openBundleMutex       sync.RWMutex
	openBundleArgsForCall []struct {
		arg1 string
	}
	openBundleReturns struct {
		result1 *bundlea.Bundle
		result2 error
	}
	openBundleReturnsOnCall map[int]struct {
		result1 *bundlea.Bundle
		result2 error
	}
	RunVerificationStub        func(*options.Verifier, bundle.VerifyCapable, *bundlea.Bundle) (*verify.VerificationResult, error)
	runVerificationMutex       sync.RWMutex
	runVerificationArgsForCall []struct {
		arg1 *options.Verifier
		arg2 bundle.VerifyCapable
		arg3 *bundlea.Bundle
	}
	runVerificationReturns struct {
		result1 *verify.VerificationResult
		result2 error
	}
	runVerificationReturnsOnCall map[int]struct {
		result1 *verify.VerificationResult
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeVerifier) BuildSigstoreVerifier(arg1 *options.Verifier) (bundle.VerifyCapable, error) {
	fake.buildSigstoreVerifierMutex.Lock()
	ret, specificReturn := fake.buildSigstoreVerifierReturnsOnCall[len(fake.buildSigstoreVerifierArgsForCall)]
	fake.buildSigstoreVerifierArgsForCall = append(fake.buildSigstoreVerifierArgsForCall, struct {
		arg1 *options.Verifier
	}{arg1})
	stub := fake.BuildSigstoreVerifierStub
	fakeReturns := fake.buildSigstoreVerifierReturns
	fake.recordInvocation("BuildSigstoreVerifier", []interface{}{arg1})
	fake.buildSigstoreVerifierMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeVerifier) BuildSigstoreVerifierCallCount() int {
	fake.buildSigstoreVerifierMutex.RLock()
	defer fake.buildSigstoreVerifierMutex.RUnlock()
	return len(fake.buildSigstoreVerifierArgsForCall)
}

func (fake *FakeVerifier) BuildSigstoreVerifierCalls(stub func(*options.Verifier) (bundle.VerifyCapable, error)) {
	fake.buildSigstoreVerifierMutex.Lock()
	defer fake.buildSigstoreVerifierMutex.Unlock()
	fake.BuildSigstoreVerifierStub = stub
}

func (fake *FakeVerifier) BuildSigstoreVerifierArgsForCall(i int) *options.Verifier {
	fake.buildSigstoreVerifierMutex.RLock()
	defer fake.buildSigstoreVerifierMutex.RUnlock()
	argsForCall := fake.buildSigstoreVerifierArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeVerifier) BuildSigstoreVerifierReturns(result1 bundle.VerifyCapable, result2 error) {
	fake.buildSigstoreVerifierMutex.Lock()
	defer fake.buildSigstoreVerifierMutex.Unlock()
	fake.BuildSigstoreVerifierStub = nil
	fake.buildSigstoreVerifierReturns = struct {
		result1 bundle.VerifyCapable
		result2 error
	}{result1, result2}
}

func (fake *FakeVerifier) BuildSigstoreVerifierReturnsOnCall(i int, result1 bundle.VerifyCapable, result2 error) {
	fake.buildSigstoreVerifierMutex.Lock()
	defer fake.buildSigstoreVerifierMutex.Unlock()
	fake.BuildSigstoreVerifierStub = nil
	if fake.buildSigstoreVerifierReturnsOnCall == nil {
		fake.buildSigstoreVerifierReturnsOnCall = make(map[int]struct {
			result1 bundle.VerifyCapable
			result2 error
		})
	}
	fake.buildSigstoreVerifierReturnsOnCall[i] = struct {
		result1 bundle.VerifyCapable
		result2 error
	}{result1, result2}
}

func (fake *FakeVerifier) OpenBundle(arg1 string) (*bundlea.Bundle, error) {
	fake.openBundleMutex.Lock()
	ret, specificReturn := fake.openBundleReturnsOnCall[len(fake.openBundleArgsForCall)]
	fake.openBundleArgsForCall = append(fake.openBundleArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.OpenBundleStub
	fakeReturns := fake.openBundleReturns
	fake.recordInvocation("OpenBundle", []interface{}{arg1})
	fake.openBundleMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeVerifier) OpenBundleCallCount() int {
	fake.openBundleMutex.RLock()
	defer fake.openBundleMutex.RUnlock()
	return len(fake.openBundleArgsForCall)
}

func (fake *FakeVerifier) OpenBundleCalls(stub func(string) (*bundlea.Bundle, error)) {
	fake.openBundleMutex.Lock()
	defer fake.openBundleMutex.Unlock()
	fake.OpenBundleStub = stub
}

func (fake *FakeVerifier) OpenBundleArgsForCall(i int) string {
	fake.openBundleMutex.RLock()
	defer fake.openBundleMutex.RUnlock()
	argsForCall := fake.openBundleArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeVerifier) OpenBundleReturns(result1 *bundlea.Bundle, result2 error) {
	fake.openBundleMutex.Lock()
	defer fake.openBundleMutex.Unlock()
	fake.OpenBundleStub = nil
	fake.openBundleReturns = struct {
		result1 *bundlea.Bundle
		result2 error
	}{result1, result2}
}

func (fake *FakeVerifier) OpenBundleReturnsOnCall(i int, result1 *bundlea.Bundle, result2 error) {
	fake.openBundleMutex.Lock()
	defer fake.openBundleMutex.Unlock()
	fake.OpenBundleStub = nil
	if fake.openBundleReturnsOnCall == nil {
		fake.openBundleReturnsOnCall = make(map[int]struct {
			result1 *bundlea.Bundle
			result2 error
		})
	}
	fake.openBundleReturnsOnCall[i] = struct {
		result1 *bundlea.Bundle
		result2 error
	}{result1, result2}
}

func (fake *FakeVerifier) RunVerification(arg1 *options.Verifier, arg2 bundle.VerifyCapable, arg3 *bundlea.Bundle) (*verify.VerificationResult, error) {
	fake.runVerificationMutex.Lock()
	ret, specificReturn := fake.runVerificationReturnsOnCall[len(fake.runVerificationArgsForCall)]
	fake.runVerificationArgsForCall = append(fake.runVerificationArgsForCall, struct {
		arg1 *options.Verifier
		arg2 bundle.VerifyCapable
		arg3 *bundlea.Bundle
	}{arg1, arg2, arg3})
	stub := fake.RunVerificationStub
	fakeReturns := fake.runVerificationReturns
	fake.recordInvocation("RunVerification", []interface{}{arg1, arg2, arg3})
	fake.runVerificationMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeVerifier) RunVerificationCallCount() int {
	fake.runVerificationMutex.RLock()
	defer fake.runVerificationMutex.RUnlock()
	return len(fake.runVerificationArgsForCall)
}

func (fake *FakeVerifier) RunVerificationCalls(stub func(*options.Verifier, bundle.VerifyCapable, *bundlea.Bundle) (*verify.VerificationResult, error)) {
	fake.runVerificationMutex.Lock()
	defer fake.runVerificationMutex.Unlock()
	fake.RunVerificationStub = stub
}

func (fake *FakeVerifier) RunVerificationArgsForCall(i int) (*options.Verifier, bundle.VerifyCapable, *bundlea.Bundle) {
	fake.runVerificationMutex.RLock()
	defer fake.runVerificationMutex.RUnlock()
	argsForCall := fake.runVerificationArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeVerifier) RunVerificationReturns(result1 *verify.VerificationResult, result2 error) {
	fake.runVerificationMutex.Lock()
	defer fake.runVerificationMutex.Unlock()
	fake.RunVerificationStub = nil
	fake.runVerificationReturns = struct {
		result1 *verify.VerificationResult
		result2 error
	}{result1, result2}
}

func (fake *FakeVerifier) RunVerificationReturnsOnCall(i int, result1 *verify.VerificationResult, result2 error) {
	fake.runVerificationMutex.Lock()
	defer fake.runVerificationMutex.Unlock()
	fake.RunVerificationStub = nil
	if fake.runVerificationReturnsOnCall == nil {
		fake.runVerificationReturnsOnCall = make(map[int]struct {
			result1 *verify.VerificationResult
			result2 error
		})
	}
	fake.runVerificationReturnsOnCall[i] = struct {
		result1 *verify.VerificationResult
		result2 error
	}{result1, result2}
}

func (fake *FakeVerifier) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeVerifier) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ bundle.Verifier = new(FakeVerifier)
