// Code generated by counterfeiter. DO NOT EDIT.
package bundlefakes

import (
	"sync"

	"github.com/carabiner-dev/signer/bundle"
	"github.com/carabiner-dev/signer/options"
	v1 "github.com/sigstore/protobuf-specs/gen/pb-go/bundle/v1"
	"github.com/sigstore/sigstore-go/pkg/sign"
)

type FakeSigner struct {
	BuildMessageStub        func([]byte) *sign.PlainData
	buildMessageMutex       sync.RWMutex
	buildMessageArgsForCall []struct {
		arg1 []byte
	}
	buildMessageReturns struct {
		result1 *sign.PlainData
	}
	buildMessageReturnsOnCall map[int]struct {
		result1 *sign.PlainData
	}
	BuildSigstoreSignerOptionsStub        func(*options.Signer) (*sign.BundleOptions, error)
	buildSigstoreSignerOptionsMutex       sync.RWMutex
	buildSigstoreSignerOptionsArgsForCall []struct {
		arg1 *options.Signer
	}
	buildSigstoreSignerOptionsReturns struct {
		result1 *sign.BundleOptions
		result2 error
	}
	buildSigstoreSignerOptionsReturnsOnCall map[int]struct {
		result1 *sign.BundleOptions
		result2 error
	}
	GetAmbientTokensStub        func(*options.Signer) error
	getAmbientTokensMutex       sync.RWMutex
	getAmbientTokensArgsForCall []struct {
		arg1 *options.Signer
	}
	getAmbientTokensReturns struct {
		result1 error
	}
	getAmbientTokensReturnsOnCall map[int]struct {
		result1 error
	}
	GetKeyPairStub        func(*options.Signer) (*sign.EphemeralKeypair, error)
	getKeyPairMutex       sync.RWMutex
	getKeyPairArgsForCall []struct {
		arg1 *options.Signer
	}
	getKeyPairReturns struct {
		result1 *sign.EphemeralKeypair
		result2 error
	}
	getKeyPairReturnsOnCall map[int]struct {
		result1 *sign.EphemeralKeypair
		result2 error
	}
	GetOidcTokenStub        func(*options.Signer) error
	getOidcTokenMutex       sync.RWMutex
	getOidcTokenArgsForCall []struct {
		arg1 *options.Signer
	}
	getOidcTokenReturns struct {
		result1 error
	}
	getOidcTokenReturnsOnCall map[int]struct {
		result1 error
	}
	SignBundleStub        func(sign.Content, sign.Keypair, *sign.BundleOptions) (*v1.Bundle, error)
	signBundleMutex       sync.RWMutex
	signBundleArgsForCall []struct {
		arg1 sign.Content
		arg2 sign.Keypair
		arg3 *sign.BundleOptions
	}
	signBundleReturns struct {
		result1 *v1.Bundle
		result2 error
	}
	signBundleReturnsOnCall map[int]struct {
		result1 *v1.Bundle
		result2 error
	}
	VerifyAttestationContentStub        func(*options.Signer, []byte) error
	verifyAttestationContentMutex       sync.RWMutex
	verifyAttestationContentArgsForCall []struct {
		arg1 *options.Signer
		arg2 []byte
	}
	verifyAttestationContentReturns struct {
		result1 error
	}
	verifyAttestationContentReturnsOnCall map[int]struct {
		result1 error
	}
	WrapDataStub        func(string, []byte) *sign.DSSEData
	wrapDataMutex       sync.RWMutex
	wrapDataArgsForCall []struct {
		arg1 string
		arg2 []byte
	}
	wrapDataReturns struct {
		result1 *sign.DSSEData
	}
	wrapDataReturnsOnCall map[int]struct {
		result1 *sign.DSSEData
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSigner) BuildMessage(arg1 []byte) *sign.PlainData {
	var arg1Copy []byte
	if arg1 != nil {
		arg1Copy = make([]byte, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.buildMessageMutex.Lock()
	ret, specificReturn := fake.buildMessageReturnsOnCall[len(fake.buildMessageArgsForCall)]
	fake.buildMessageArgsForCall = append(fake.buildMessageArgsForCall, struct {
		arg1 []byte
	}{arg1Copy})
	stub := fake.BuildMessageStub
	fakeReturns := fake.buildMessageReturns
	fake.recordInvocation("BuildMessage", []interface{}{arg1Copy})
	fake.buildMessageMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSigner) BuildMessageCallCount() int {
	fake.buildMessageMutex.RLock()
	defer fake.buildMessageMutex.RUnlock()
	return len(fake.buildMessageArgsForCall)
}

func (fake *FakeSigner) BuildMessageCalls(stub func([]byte) *sign.PlainData) {
	fake.buildMessageMutex.Lock()
	defer fake.buildMessageMutex.Unlock()
	fake.BuildMessageStub = stub
}

func (fake *FakeSigner) BuildMessageArgsForCall(i int) []byte {
	fake.buildMessageMutex.RLock()
	defer fake.buildMessageMutex.RUnlock()
	argsForCall := fake.buildMessageArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSigner) BuildMessageReturns(result1 *sign.PlainData) {
	fake.buildMessageMutex.Lock()
	defer fake.buildMessageMutex.Unlock()
	fake.BuildMessageStub = nil
	fake.buildMessageReturns = struct {
		result1 *sign.PlainData
	}{result1}
}

func (fake *FakeSigner) BuildMessageReturnsOnCall(i int, result1 *sign.PlainData) {
	fake.buildMessageMutex.Lock()
	defer fake.buildMessageMutex.Unlock()
	fake.BuildMessageStub = nil
	if fake.buildMessageReturnsOnCall == nil {
		fake.buildMessageReturnsOnCall = make(map[int]struct {
			result1 *sign.PlainData
		})
	}
	fake.buildMessageReturnsOnCall[i] = struct {
		result1 *sign.PlainData
	}{result1}
}

func (fake *FakeSigner) BuildSigstoreSignerOptions(arg1 *options.Signer) (*sign.BundleOptions, error) {
	fake.buildSigstoreSignerOptionsMutex.Lock()
	ret, specificReturn := fake.buildSigstoreSignerOptionsReturnsOnCall[len(fake.buildSigstoreSignerOptionsArgsForCall)]
	fake.buildSigstoreSignerOptionsArgsForCall = append(fake.buildSigstoreSignerOptionsArgsForCall, struct {
		arg1 *options.Signer
	}{arg1})
	stub := fake.BuildSigstoreSignerOptionsStub
	fakeReturns := fake.buildSigstoreSignerOptionsReturns
	fake.recordInvocation("BuildSigstoreSignerOptions", []interface{}{arg1})
	fake.buildSigstoreSignerOptionsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSigner) BuildSigstoreSignerOptionsCallCount() int {
	fake.buildSigstoreSignerOptionsMutex.RLock()
	defer fake.buildSigstoreSignerOptionsMutex.RUnlock()
	return len(fake.buildSigstoreSignerOptionsArgsForCall)
}

func (fake *FakeSigner) BuildSigstoreSignerOptionsCalls(stub func(*options.Signer) (*sign.BundleOptions, error)) {
	fake.buildSigstoreSignerOptionsMutex.Lock()
	defer fake.buildSigstoreSignerOptionsMutex.Unlock()
	fake.BuildSigstoreSignerOptionsStub = stub
}

func (fake *FakeSigner) BuildSigstoreSignerOptionsArgsForCall(i int) *options.Signer {
	fake.buildSigstoreSignerOptionsMutex.RLock()
	defer fake.buildSigstoreSignerOptionsMutex.RUnlock()
	argsForCall := fake.buildSigstoreSignerOptionsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSigner) BuildSigstoreSignerOptionsReturns(result1 *sign.BundleOptions, result2 error) {
	fake.buildSigstoreSignerOptionsMutex.Lock()
	defer fake.buildSigstoreSignerOptionsMutex.Unlock()
	fake.BuildSigstoreSignerOptionsStub = nil
	fake.buildSigstoreSignerOptionsReturns = struct {
		result1 *sign.BundleOptions
		result2 error
	}{result1, result2}
}

func (fake *FakeSigner) BuildSigstoreSignerOptionsReturnsOnCall(i int, result1 *sign.BundleOptions, result2 error) {
	fake.buildSigstoreSignerOptionsMutex.Lock()
	defer fake.buildSigstoreSignerOptionsMutex.Unlock()
	fake.BuildSigstoreSignerOptionsStub = nil
	if fake.buildSigstoreSignerOptionsReturnsOnCall == nil {
		fake.buildSigstoreSignerOptionsReturnsOnCall = make(map[int]struct {
			result1 *sign.BundleOptions
			result2 error
		})
	}
	fake.buildSigstoreSignerOptionsReturnsOnCall[i] = struct {
		result1 *sign.BundleOptions
		result2 error
	}{result1, result2}
}

func (fake *FakeSigner) GetAmbientTokens(arg1 *options.Signer) error {
	fake.getAmbientTokensMutex.Lock()
	ret, specificReturn := fake.getAmbientTokensReturnsOnCall[len(fake.getAmbientTokensArgsForCall)]
	fake.getAmbientTokensArgsForCall = append(fake.getAmbientTokensArgsForCall, struct {
		arg1 *options.Signer
	}{arg1})
	stub := fake.GetAmbientTokensStub
	fakeReturns := fake.getAmbientTokensReturns
	fake.recordInvocation("GetAmbientTokens", []interface{}{arg1})
	fake.getAmbientTokensMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSigner) GetAmbientTokensCallCount() int {
	fake.getAmbientTokensMutex.RLock()
	defer fake.getAmbientTokensMutex.RUnlock()
	return len(fake.getAmbientTokensArgsForCall)
}

func (fake *FakeSigner) GetAmbientTokensCalls(stub func(*options.Signer) error) {
	fake.getAmbientTokensMutex.Lock()
	defer fake.getAmbientTokensMutex.Unlock()
	fake.GetAmbientTokensStub = stub
}

func (fake *FakeSigner) GetAmbientTokensArgsForCall(i int) *options.Signer {
	fake.getAmbientTokensMutex.RLock()
	defer fake.getAmbientTokensMutex.RUnlock()
	argsForCall := fake.getAmbientTokensArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSigner) GetAmbientTokensReturns(result1 error) {
	fake.getAmbientTokensMutex.Lock()
	defer fake.getAmbientTokensMutex.Unlock()
	fake.GetAmbientTokensStub = nil
	fake.getAmbientTokensReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSigner) GetAmbientTokensReturnsOnCall(i int, result1 error) {
	fake.getAmbientTokensMutex.Lock()
	defer fake.getAmbientTokensMutex.Unlock()
	fake.GetAmbientTokensStub = nil
	if fake.getAmbientTokensReturnsOnCall == nil {
		fake.getAmbientTokensReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.getAmbientTokensReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSigner) GetKeyPair(arg1 *options.Signer) (*sign.EphemeralKeypair, error) {
	fake.getKeyPairMutex.Lock()
	ret, specificReturn := fake.getKeyPairReturnsOnCall[len(fake.getKeyPairArgsForCall)]
	fake.getKeyPairArgsForCall = append(fake.getKeyPairArgsForCall, struct {
		arg1 *options.Signer
	}{arg1})
	stub := fake.GetKeyPairStub
	fakeReturns := fake.getKeyPairReturns
	fake.recordInvocation("GetKeyPair", []interface{}{arg1})
	fake.getKeyPairMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSigner) GetKeyPairCallCount() int {
	fake.getKeyPairMutex.RLock()
	defer fake.getKeyPairMutex.RUnlock()
	return len(fake.getKeyPairArgsForCall)
}

func (fake *FakeSigner) GetKeyPairCalls(stub func(*options.Signer) (*sign.EphemeralKeypair, error)) {
	fake.getKeyPairMutex.Lock()
	defer fake.getKeyPairMutex.Unlock()
	fake.GetKeyPairStub = stub
}

func (fake *FakeSigner) GetKeyPairArgsForCall(i int) *options.Signer {
	fake.getKeyPairMutex.RLock()
	defer fake.getKeyPairMutex.RUnlock()
	argsForCall := fake.getKeyPairArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSigner) GetKeyPairReturns(result1 *sign.EphemeralKeypair, result2 error) {
	fake.getKeyPairMutex.Lock()
	defer fake.getKeyPairMutex.Unlock()
	fake.GetKeyPairStub = nil
	fake.getKeyPairReturns = struct {
		result1 *sign.EphemeralKeypair
		result2 error
	}{result1, result2}
}

func (fake *FakeSigner) GetKeyPairReturnsOnCall(i int, result1 *sign.EphemeralKeypair, result2 error) {
	fake.getKeyPairMutex.Lock()
	defer fake.getKeyPairMutex.Unlock()
	fake.GetKeyPairStub = nil
	if fake.getKeyPairReturnsOnCall == nil {
		fake.getKeyPairReturnsOnCall = make(map[int]struct {
			result1 *sign.EphemeralKeypair
			result2 error
		})
	}
	fake.getKeyPairReturnsOnCall[i] = struct {
		result1 *sign.EphemeralKeypair
		result2 error
	}{result1, result2}
}

func (fake *FakeSigner) GetOidcToken(arg1 *options.Signer) error {
	fake.getOidcTokenMutex.Lock()
	ret, specificReturn := fake.getOidcTokenReturnsOnCall[len(fake.getOidcTokenArgsForCall)]
	fake.getOidcTokenArgsForCall = append(fake.getOidcTokenArgsForCall, struct {
		arg1 *options.Signer
	}{arg1})
	stub := fake.GetOidcTokenStub
	fakeReturns := fake.getOidcTokenReturns
	fake.recordInvocation("GetOidcToken", []interface{}{arg1})
	fake.getOidcTokenMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSigner) GetOidcTokenCallCount() int {
	fake.getOidcTokenMutex.RLock()
	defer fake.getOidcTokenMutex.RUnlock()
	return len(fake.getOidcTokenArgsForCall)
}

func (fake *FakeSigner) GetOidcTokenCalls(stub func(*options.Signer) error) {
	fake.getOidcTokenMutex.Lock()
	defer fake.getOidcTokenMutex.Unlock()
	fake.GetOidcTokenStub = stub
}

func (fake *FakeSigner) GetOidcTokenArgsForCall(i int) *options.Signer {
	fake.getOidcTokenMutex.RLock()
	defer fake.getOidcTokenMutex.RUnlock()
	argsForCall := fake.getOidcTokenArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSigner) GetOidcTokenReturns(result1 error) {
	fake.getOidcTokenMutex.Lock()
	defer fake.getOidcTokenMutex.Unlock()
	fake.GetOidcTokenStub = nil
	fake.getOidcTokenReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSigner) GetOidcTokenReturnsOnCall(i int, result1 error) {
	fake.getOidcTokenMutex.Lock()
	defer fake.getOidcTokenMutex.Unlock()
	fake.GetOidcTokenStub = nil
	if fake.getOidcTokenReturnsOnCall == nil {
		fake.getOidcTokenReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.getOidcTokenReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSigner) SignBundle(arg1 sign.Content, arg2 sign.Keypair, arg3 *sign.BundleOptions) (*v1.Bundle, error) {
	fake.signBundleMutex.Lock()
	ret, specificReturn := fake.signBundleReturnsOnCall[len(fake.signBundleArgsForCall)]
	fake.signBundleArgsForCall = append(fake.signBundleArgsForCall, struct {
		arg1 sign.Content
		arg2 sign.Keypair
		arg3 *sign.BundleOptions
	}{arg1, arg2, arg3})
	stub := fake.SignBundleStub
	fakeReturns := fake.signBundleReturns
	fake.recordInvocation("SignBundle", []interface{}{arg1, arg2, arg3})
	fake.signBundleMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSigner) SignBundleCallCount() int {
	fake.signBundleMutex.RLock()
	defer fake.signBundleMutex.RUnlock()
	return len(fake.signBundleArgsForCall)
}

func (fake *FakeSigner) SignBundleCalls(stub func(sign.Content, sign.Keypair, *sign.BundleOptions) (*v1.Bundle, error)) {
	fake.signBundleMutex.Lock()
	defer fake.signBundleMutex.Unlock()
	fake.SignBundleStub = stub
}

func (fake *FakeSigner) SignBundleArgsForCall(i int) (sign.Content, sign.Keypair, *sign.BundleOptions) {
	fake.signBundleMutex.RLock()
	defer fake.signBundleMutex.RUnlock()
	argsForCall := fake.signBundleArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSigner) SignBundleReturns(result1 *v1.Bundle, result2 error) {
	fake.signBundleMutex.Lock()
	defer fake.signBundleMutex.Unlock()
	fake.SignBundleStub = nil
	fake.signBundleReturns = struct {
		result1 *v1.Bundle
		result2 error
	}{result1, result2}
}

func (fake *FakeSigner) SignBundleReturnsOnCall(i int, result1 *v1.Bundle, result2 error) {
	fake.signBundleMutex.Lock()
	defer fake.signBundleMutex.Unlock()
	fake.SignBundleStub = nil
	if fake.signBundleReturnsOnCall == nil {
		fake.signBundleReturnsOnCall = make(map[int]struct {
			result1 *v1.Bundle
			result2 error
		})
	}
	fake.signBundleReturnsOnCall[i] = struct {
		result1 *v1.Bundle
		result2 error
	}{result1, result2}
}

func (fake *FakeSigner) VerifyAttestationContent(arg1 *options.Signer, arg2 []byte) error {
	var arg2Copy []byte
	if arg2 != nil {
		arg2Copy = make([]byte, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.verifyAttestationContentMutex.Lock()
	ret, specificReturn := fake.verifyAttestationContentReturnsOnCall[len(fake.verifyAttestationContentArgsForCall)]
	fake.verifyAttestationContentArgsForCall = append(fake.verifyAttestationContentArgsForCall, struct {
		arg1 *options.Signer
		arg2 []byte
	}{arg1, arg2Copy})
	stub := fake.VerifyAttestationContentStub
	fakeReturns := fake.verifyAttestationContentReturns
	fake.recordInvocation("VerifyAttestationContent", []interface{}{arg1, arg2Copy})
	fake.verifyAttestationContentMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSigner) VerifyAttestationContentCallCount() int {
	fake.verifyAttestationContentMutex.RLock()
	defer fake.verifyAttestationContentMutex.RUnlock()
	return len(fake.verifyAttestationContentArgsForCall)
}

func (fake *FakeSigner) VerifyAttestationContentCalls(stub func(*options.Signer, []byte) error) {
	fake.verifyAttestationContentMutex.Lock()
	defer fake.verifyAttestationContentMutex.Unlock()
	fake.VerifyAttestationContentStub = stub
}

func (fake *FakeSigner) VerifyAttestationContentArgsForCall(i int) (*options.Signer, []byte) {
	fake.verifyAttestationContentMutex.RLock()
	defer fake.verifyAttestationContentMutex.RUnlock()
	argsForCall := fake.verifyAttestationContentArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeSigner) VerifyAttestationContentReturns(result1 error) {
	fake.verifyAttestationContentMutex.Lock()
	defer fake.verifyAttestationContentMutex.Unlock()
	fake.VerifyAttestationContentStub = nil
	fake.verifyAttestationContentReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSigner) VerifyAttestationContentReturnsOnCall(i int, result1 error) {
	fake.verifyAttestationContentMutex.Lock()
	defer fake.verifyAttestationContentMutex.Unlock()
	fake.VerifyAttestationContentStub = nil
	if fake.verifyAttestationContentReturnsOnCall == nil {
		fake.verifyAttestationContentReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.verifyAttestationContentReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSigner) WrapData(arg1 string, arg2 []byte) *sign.DSSEData {
	var arg2Copy []byte
	if arg2 != nil {
		arg2Copy = make([]byte, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.wrapDataMutex.Lock()
	ret, specificReturn := fake.wrapDataReturnsOnCall[len(fake.wrapDataArgsForCall)]
	fake.wrapDataArgsForCall = append(fake.wrapDataArgsForCall, struct {
		arg1 string
		arg2 []byte
	}{arg1, arg2Copy})
	stub := fake.WrapDataStub
	fakeReturns := fake.wrapDataReturns
	fake.recordInvocation("WrapData", []interface{}{arg1, arg2Copy})
	fake.wrapDataMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSigner) WrapDataCallCount() int {
	fake.wrapDataMutex.RLock()
	defer fake.wrapDataMutex.RUnlock()
	return len(fake.wrapDataArgsForCall)
}

func (fake *FakeSigner) WrapDataCalls(stub func(string, []byte) *sign.DSSEData) {
	fake.wrapDataMutex.Lock()
	defer fake.wrapDataMutex.Unlock()
	fake.WrapDataStub = stub
}

func (fake *FakeSigner) WrapDataArgsForCall(i int) (string, []byte) {
	fake.wrapDataMutex.RLock()
	defer fake.wrapDataMutex.RUnlock()
	argsForCall := fake.wrapDataArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeSigner) WrapDataReturns(result1 *sign.DSSEData) {
	fake.wrapDataMutex.Lock()
	defer fake.wrapDataMutex.Unlock()
	fake.WrapDataStub = nil
	fake.wrapDataReturns = struct {
		result1 *sign.DSSEData
	}{result1}
}

func (fake *FakeSigner) WrapDataReturnsOnCall(i int, result1 *sign.DSSEData) {
	fake.wrapDataMutex.Lock()
	defer fake.wrapDataMutex.Unlock()
	fake.WrapDataStub = nil
	if fake.wrapDataReturnsOnCall == nil {
		fake.wrapDataReturnsOnCall = make(map[int]struct {
			result1 *sign.DSSEData
		})
	}
	fake.wrapDataReturnsOnCall[i] = struct {
		result1 *sign.DSSEData
	}{result1}
}

func (fake *FakeSigner) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSigner) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ bundle.Signer = new(FakeSigner)
