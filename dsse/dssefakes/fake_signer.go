// Code generated by counterfeiter. DO NOT EDIT.
package dssefakes

import (
	"sync"

	"github.com/carabiner-dev/signer/dsse"
	"github.com/carabiner-dev/signer/key"
	dssea "github.com/sigstore/protobuf-specs/gen/pb-go/dsse"
)

type FakeSigner struct {
	SignStub        func(*dssea.Envelope, []key.PrivateKeyProvider) error
	signMutex       sync.RWMutex
	signArgsForCall []struct {
		arg1 *dssea.Envelope
		arg2 []key.PrivateKeyProvider
	}
	signReturns struct {
		result1 error
	}
	signReturnsOnCall map[int]struct {
		result1 error
	}
	WrapPayloadStub        func(string, []byte) (*dssea.Envelope, error)
	wrapPayloadMutex       sync.RWMutex
	wrapPayloadArgsForCall []struct {
		arg1 string
		arg2 []byte
	}
	wrapPayloadReturns struct {
		result1 *dssea.Envelope
		result2 error
	}
	wrapPayloadReturnsOnCall map[int]struct {
		result1 *dssea.Envelope
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSigner) Sign(arg1 *dssea.Envelope, arg2 []key.PrivateKeyProvider) error {
	var arg2Copy []key.PrivateKeyProvider
	if arg2 != nil {
		arg2Copy = make([]key.PrivateKeyProvider, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.signMutex.Lock()
	ret, specificReturn := fake.signReturnsOnCall[len(fake.signArgsForCall)]
	fake.signArgsForCall = append(fake.signArgsForCall, struct {
		arg1 *dssea.Envelope
		arg2 []key.PrivateKeyProvider
	}{arg1, arg2Copy})
	stub := fake.SignStub
	fakeReturns := fake.signReturns
	fake.recordInvocation("Sign", []interface{}{arg1, arg2Copy})
	fake.signMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSigner) SignCallCount() int {
	fake.signMutex.RLock()
	defer fake.signMutex.RUnlock()
	return len(fake.signArgsForCall)
}

func (fake *FakeSigner) SignCalls(stub func(*dssea.Envelope, []key.PrivateKeyProvider) error) {
	fake.signMutex.Lock()
	defer fake.signMutex.Unlock()
	fake.SignStub = stub
}

func (fake *FakeSigner) SignArgsForCall(i int) (*dssea.Envelope, []key.PrivateKeyProvider) {
	fake.signMutex.RLock()
	defer fake.signMutex.RUnlock()
	argsForCall := fake.signArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeSigner) SignReturns(result1 error) {
	fake.signMutex.Lock()
	defer fake.signMutex.Unlock()
	fake.SignStub = nil
	fake.signReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSigner) SignReturnsOnCall(i int, result1 error) {
	fake.signMutex.Lock()
	defer fake.signMutex.Unlock()
	fake.SignStub = nil
	if fake.signReturnsOnCall == nil {
		fake.signReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.signReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSigner) WrapPayload(arg1 string, arg2 []byte) (*dssea.Envelope, error) {
	var arg2Copy []byte
	if arg2 != nil {
		arg2Copy = make([]byte, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.wrapPayloadMutex.Lock()
	ret, specificReturn := fake.wrapPayloadReturnsOnCall[len(fake.wrapPayloadArgsForCall)]
	fake.wrapPayloadArgsForCall = append(fake.wrapPayloadArgsForCall, struct {
		arg1 string
		arg2 []byte
	}{arg1, arg2Copy})
	stub := fake.WrapPayloadStub
	fakeReturns := fake.wrapPayloadReturns
	fake.recordInvocation("WrapPayload", []interface{}{arg1, arg2Copy})
	fake.wrapPayloadMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSigner) WrapPayloadCallCount() int {
	fake.wrapPayloadMutex.RLock()
	defer fake.wrapPayloadMutex.RUnlock()
	return len(fake.wrapPayloadArgsForCall)
}

func (fake *FakeSigner) WrapPayloadCalls(stub func(string, []byte) (*dssea.Envelope, error)) {
	fake.wrapPayloadMutex.Lock()
	defer fake.wrapPayloadMutex.Unlock()
	fake.WrapPayloadStub = stub
}

func (fake *FakeSigner) WrapPayloadArgsForCall(i int) (string, []byte) {
	fake.wrapPayloadMutex.RLock()
	defer fake.wrapPayloadMutex.RUnlock()
	argsForCall := fake.wrapPayloadArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeSigner) WrapPayloadReturns(result1 *dssea.Envelope, result2 error) {
	fake.wrapPayloadMutex.Lock()
	defer fake.wrapPayloadMutex.Unlock()
	fake.WrapPayloadStub = nil
	fake.wrapPayloadReturns = struct {
		result1 *dssea.Envelope
		result2 error
	}{result1, result2}
}

func (fake *FakeSigner) WrapPayloadReturnsOnCall(i int, result1 *dssea.Envelope, result2 error) {
	fake.wrapPayloadMutex.Lock()
	defer fake.wrapPayloadMutex.Unlock()
	fake.WrapPayloadStub = nil
	if fake.wrapPayloadReturnsOnCall == nil {
		fake.wrapPayloadReturnsOnCall = make(map[int]struct {
			result1 *dssea.Envelope
			result2 error
		})
	}
	fake.wrapPayloadReturnsOnCall[i] = struct {
		result1 *dssea.Envelope
		result2 error
	}{result1, result2}
}

func (fake *FakeSigner) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSigner) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ dsse.Signer = new(FakeSigner)
